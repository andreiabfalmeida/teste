
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080017c8  080017c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001800  08001800  00011800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001804  08001804  00011804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  2000000c  08001814  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000002c  08001814  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000033b6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e34  00000000  00000000  000233eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003f0  00000000  00000000  00024220  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  00024610  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001a465  00000000  00000000  00024968  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003464  00000000  00000000  0003edcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009365c  00000000  00000000  00042231  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000d588d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000ddc  00000000  00000000  000d590c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080017b0 	.word	0x080017b0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080017b0 	.word	0x080017b0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b97a 	b.w	8000530 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	460e      	mov	r6, r1
 800025c:	4604      	mov	r4, r0
 800025e:	9d08      	ldr	r5, [sp, #32]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d150      	bne.n	8000306 <__udivmoddi4+0xb2>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d96c      	bls.n	8000344 <__udivmoddi4+0xf0>
 800026a:	fab2 fe82 	clz	lr, r2
 800026e:	f1be 0f00 	cmp.w	lr, #0
 8000272:	d00b      	beq.n	800028c <__udivmoddi4+0x38>
 8000274:	f1ce 0c20 	rsb	ip, lr, #32
 8000278:	fa01 f60e 	lsl.w	r6, r1, lr
 800027c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000280:	fa02 f70e 	lsl.w	r7, r2, lr
 8000284:	ea4c 0c06 	orr.w	ip, ip, r6
 8000288:	fa00 f40e 	lsl.w	r4, r0, lr
 800028c:	0c3a      	lsrs	r2, r7, #16
 800028e:	fbbc f9f2 	udiv	r9, ip, r2
 8000292:	b2bb      	uxth	r3, r7
 8000294:	fb02 cc19 	mls	ip, r2, r9, ip
 8000298:	fb09 fa03 	mul.w	sl, r9, r3
 800029c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80002a0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80002a4:	45b2      	cmp	sl, r6
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x6a>
 80002a8:	19f6      	adds	r6, r6, r7
 80002aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80002ae:	f080 8125 	bcs.w	80004fc <__udivmoddi4+0x2a8>
 80002b2:	45b2      	cmp	sl, r6
 80002b4:	f240 8122 	bls.w	80004fc <__udivmoddi4+0x2a8>
 80002b8:	f1a9 0902 	sub.w	r9, r9, #2
 80002bc:	443e      	add	r6, r7
 80002be:	eba6 060a 	sub.w	r6, r6, sl
 80002c2:	fbb6 f0f2 	udiv	r0, r6, r2
 80002c6:	fb02 6610 	mls	r6, r2, r0, r6
 80002ca:	fb00 f303 	mul.w	r3, r0, r3
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80002d4:	42a3      	cmp	r3, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x98>
 80002d8:	19e4      	adds	r4, r4, r7
 80002da:	f100 32ff 	add.w	r2, r0, #4294967295
 80002de:	f080 810b 	bcs.w	80004f8 <__udivmoddi4+0x2a4>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	f240 8108 	bls.w	80004f8 <__udivmoddi4+0x2a4>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	2100      	movs	r1, #0
 80002ee:	1ae4      	subs	r4, r4, r3
 80002f0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d062      	beq.n	80003be <__udivmoddi4+0x16a>
 80002f8:	2300      	movs	r3, #0
 80002fa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fe:	602c      	str	r4, [r5, #0]
 8000300:	606b      	str	r3, [r5, #4]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0xc6>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d055      	beq.n	80003ba <__udivmoddi4+0x166>
 800030e:	2100      	movs	r1, #0
 8000310:	e885 0041 	stmia.w	r5, {r0, r6}
 8000314:	4608      	mov	r0, r1
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	f040 808f 	bne.w	8000442 <__udivmoddi4+0x1ee>
 8000324:	42b3      	cmp	r3, r6
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xda>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80fc 	bhi.w	8000526 <__udivmoddi4+0x2d2>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb66 0603 	sbc.w	r6, r6, r3
 8000334:	2001      	movs	r0, #1
 8000336:	46b4      	mov	ip, r6
 8000338:	2d00      	cmp	r5, #0
 800033a:	d040      	beq.n	80003be <__udivmoddi4+0x16a>
 800033c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	b912      	cbnz	r2, 800034c <__udivmoddi4+0xf8>
 8000346:	2701      	movs	r7, #1
 8000348:	fbb7 f7f2 	udiv	r7, r7, r2
 800034c:	fab7 fe87 	clz	lr, r7
 8000350:	f1be 0f00 	cmp.w	lr, #0
 8000354:	d135      	bne.n	80003c2 <__udivmoddi4+0x16e>
 8000356:	2101      	movs	r1, #1
 8000358:	1bf6      	subs	r6, r6, r7
 800035a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800035e:	fa1f f887 	uxth.w	r8, r7
 8000362:	fbb6 f2fc 	udiv	r2, r6, ip
 8000366:	fb0c 6612 	mls	r6, ip, r2, r6
 800036a:	fb08 f002 	mul.w	r0, r8, r2
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000374:	42b0      	cmp	r0, r6
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x134>
 8000378:	19f6      	adds	r6, r6, r7
 800037a:	f102 33ff 	add.w	r3, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x132>
 8000380:	42b0      	cmp	r0, r6
 8000382:	f200 80d2 	bhi.w	800052a <__udivmoddi4+0x2d6>
 8000386:	461a      	mov	r2, r3
 8000388:	1a36      	subs	r6, r6, r0
 800038a:	fbb6 f0fc 	udiv	r0, r6, ip
 800038e:	fb0c 6610 	mls	r6, ip, r0, r6
 8000392:	fb08 f800 	mul.w	r8, r8, r0
 8000396:	b2a3      	uxth	r3, r4
 8000398:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x15c>
 80003a0:	19e4      	adds	r4, r4, r7
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x15a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80b9 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0xa0>
 80003ba:	4629      	mov	r1, r5
 80003bc:	4628      	mov	r0, r5
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003c6:	f1ce 0320 	rsb	r3, lr, #32
 80003ca:	fa26 f203 	lsr.w	r2, r6, r3
 80003ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80003d2:	fbb2 f1fc 	udiv	r1, r2, ip
 80003d6:	fa1f f887 	uxth.w	r8, r7
 80003da:	fb0c 2211 	mls	r2, ip, r1, r2
 80003de:	fa06 f60e 	lsl.w	r6, r6, lr
 80003e2:	fa20 f303 	lsr.w	r3, r0, r3
 80003e6:	fb01 f908 	mul.w	r9, r1, r8
 80003ea:	4333      	orrs	r3, r6
 80003ec:	0c1e      	lsrs	r6, r3, #16
 80003ee:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80003f2:	45b1      	cmp	r9, r6
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x1ba>
 80003fa:	19f6      	adds	r6, r6, r7
 80003fc:	f101 32ff 	add.w	r2, r1, #4294967295
 8000400:	f080 808c 	bcs.w	800051c <__udivmoddi4+0x2c8>
 8000404:	45b1      	cmp	r9, r6
 8000406:	f240 8089 	bls.w	800051c <__udivmoddi4+0x2c8>
 800040a:	3902      	subs	r1, #2
 800040c:	443e      	add	r6, r7
 800040e:	eba6 0609 	sub.w	r6, r6, r9
 8000412:	fbb6 f0fc 	udiv	r0, r6, ip
 8000416:	fb0c 6210 	mls	r2, ip, r0, r6
 800041a:	fb00 f908 	mul.w	r9, r0, r8
 800041e:	b29e      	uxth	r6, r3
 8000420:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000424:	45b1      	cmp	r9, r6
 8000426:	d907      	bls.n	8000438 <__udivmoddi4+0x1e4>
 8000428:	19f6      	adds	r6, r6, r7
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	d271      	bcs.n	8000514 <__udivmoddi4+0x2c0>
 8000430:	45b1      	cmp	r9, r6
 8000432:	d96f      	bls.n	8000514 <__udivmoddi4+0x2c0>
 8000434:	3802      	subs	r0, #2
 8000436:	443e      	add	r6, r7
 8000438:	eba6 0609 	sub.w	r6, r6, r9
 800043c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000440:	e78f      	b.n	8000362 <__udivmoddi4+0x10e>
 8000442:	f1c1 0720 	rsb	r7, r1, #32
 8000446:	fa22 f807 	lsr.w	r8, r2, r7
 800044a:	408b      	lsls	r3, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa26 f407 	lsr.w	r4, r6, r7
 8000454:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000458:	fbb4 f9fe 	udiv	r9, r4, lr
 800045c:	fa1f fc83 	uxth.w	ip, r3
 8000460:	fb0e 4419 	mls	r4, lr, r9, r4
 8000464:	408e      	lsls	r6, r1
 8000466:	fa20 f807 	lsr.w	r8, r0, r7
 800046a:	fb09 fa0c 	mul.w	sl, r9, ip
 800046e:	ea48 0806 	orr.w	r8, r8, r6
 8000472:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000476:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800047a:	45a2      	cmp	sl, r4
 800047c:	fa02 f201 	lsl.w	r2, r2, r1
 8000480:	fa00 f601 	lsl.w	r6, r0, r1
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x244>
 8000486:	18e4      	adds	r4, r4, r3
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d244      	bcs.n	8000518 <__udivmoddi4+0x2c4>
 800048e:	45a2      	cmp	sl, r4
 8000490:	d942      	bls.n	8000518 <__udivmoddi4+0x2c4>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	441c      	add	r4, r3
 8000498:	eba4 040a 	sub.w	r4, r4, sl
 800049c:	fbb4 f0fe 	udiv	r0, r4, lr
 80004a0:	fb0e 4410 	mls	r4, lr, r0, r4
 80004a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80004a8:	fa1f f888 	uxth.w	r8, r8
 80004ac:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004b0:	45a4      	cmp	ip, r4
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x270>
 80004b4:	18e4      	adds	r4, r4, r3
 80004b6:	f100 3eff 	add.w	lr, r0, #4294967295
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2bc>
 80004bc:	45a4      	cmp	ip, r4
 80004be:	d927      	bls.n	8000510 <__udivmoddi4+0x2bc>
 80004c0:	3802      	subs	r0, #2
 80004c2:	441c      	add	r4, r3
 80004c4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c8:	fba0 8902 	umull	r8, r9, r0, r2
 80004cc:	eba4 0c0c 	sub.w	ip, r4, ip
 80004d0:	45cc      	cmp	ip, r9
 80004d2:	46c2      	mov	sl, r8
 80004d4:	46ce      	mov	lr, r9
 80004d6:	d315      	bcc.n	8000504 <__udivmoddi4+0x2b0>
 80004d8:	d012      	beq.n	8000500 <__udivmoddi4+0x2ac>
 80004da:	b155      	cbz	r5, 80004f2 <__udivmoddi4+0x29e>
 80004dc:	ebb6 030a 	subs.w	r3, r6, sl
 80004e0:	eb6c 060e 	sbc.w	r6, ip, lr
 80004e4:	fa06 f707 	lsl.w	r7, r6, r7
 80004e8:	40cb      	lsrs	r3, r1
 80004ea:	431f      	orrs	r7, r3
 80004ec:	40ce      	lsrs	r6, r1
 80004ee:	602f      	str	r7, [r5, #0]
 80004f0:	606e      	str	r6, [r5, #4]
 80004f2:	2100      	movs	r1, #0
 80004f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6f7      	b.n	80002ec <__udivmoddi4+0x98>
 80004fc:	4689      	mov	r9, r1
 80004fe:	e6de      	b.n	80002be <__udivmoddi4+0x6a>
 8000500:	4546      	cmp	r6, r8
 8000502:	d2ea      	bcs.n	80004da <__udivmoddi4+0x286>
 8000504:	ebb8 0a02 	subs.w	sl, r8, r2
 8000508:	eb69 0e03 	sbc.w	lr, r9, r3
 800050c:	3801      	subs	r0, #1
 800050e:	e7e4      	b.n	80004da <__udivmoddi4+0x286>
 8000510:	4670      	mov	r0, lr
 8000512:	e7d7      	b.n	80004c4 <__udivmoddi4+0x270>
 8000514:	4618      	mov	r0, r3
 8000516:	e78f      	b.n	8000438 <__udivmoddi4+0x1e4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7bd      	b.n	8000498 <__udivmoddi4+0x244>
 800051c:	4611      	mov	r1, r2
 800051e:	e776      	b.n	800040e <__udivmoddi4+0x1ba>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	e744      	b.n	80003b0 <__udivmoddi4+0x15c>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0xe4>
 800052a:	3a02      	subs	r2, #2
 800052c:	443e      	add	r6, r7
 800052e:	e72b      	b.n	8000388 <__udivmoddi4+0x134>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_Init+0x28>)
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_Init+0x28>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f905 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 f808 	bl	8000560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f001 f842 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40022000 	.word	0x40022000

08000560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x54>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x58>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000576:	fbb3 f3f1 	udiv	r3, r3, r1
 800057a:	fbb2 f3f3 	udiv	r3, r2, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f90f 	bl	80007a2 <HAL_SYSTICK_Config>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	e00e      	b.n	80005ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	d80a      	bhi.n	80005aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000594:	2200      	movs	r2, #0
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 f8e5 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HAL_InitTick+0x5c>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e000      	b.n	80005ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000004 	.word	0x20000004
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_IncTick+0x1c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_IncTick+0x20>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <HAL_IncTick+0x20>)
 80005d2:	6013      	str	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	20000004 	.word	0x20000004
 80005e0:	20000028 	.word	0x20000028

080005e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <HAL_GetTick+0x10>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	20000028 	.word	0x20000028

080005f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <__NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	db0a      	blt.n	8000686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	490d      	ldr	r1, [pc, #52]	; (80006a8 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	0112      	lsls	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	440b      	add	r3, r1
 8000680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000684:	e00a      	b.n	800069c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	0112      	lsls	r2, r2, #4
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	440b      	add	r3, r1
 800069a:	761a      	strb	r2, [r3, #24]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4
 80006d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d902      	bls.n	80006e0 <NVIC_EncodePriority+0x30>
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b03      	subs	r3, #3
 80006de:	e000      	b.n	80006e2 <NVIC_EncodePriority+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	2201      	movs	r2, #1
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	1e5a      	subs	r2, r3, #1
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	401a      	ands	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f6:	2101      	movs	r1, #1
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	1e59      	subs	r1, r3, #1
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f7ff ff92 	bl	800065c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff4b 	bl	80005f8 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff60 	bl	8000640 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff92 	bl	80006b0 <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff61 	bl	800065c <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b08b      	sub	sp, #44	; 0x2c
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ce:	e127      	b.n	8000a20 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007d0:	2201      	movs	r2, #1
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	4013      	ands	r3, r2
 80007e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	f040 8116 	bne.w	8000a1a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b12      	cmp	r3, #18
 80007f4:	d034      	beq.n	8000860 <HAL_GPIO_Init+0xa4>
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d80d      	bhi.n	8000816 <HAL_GPIO_Init+0x5a>
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d02b      	beq.n	8000856 <HAL_GPIO_Init+0x9a>
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d804      	bhi.n	800080c <HAL_GPIO_Init+0x50>
 8000802:	2b00      	cmp	r3, #0
 8000804:	d031      	beq.n	800086a <HAL_GPIO_Init+0xae>
 8000806:	2b01      	cmp	r3, #1
 8000808:	d01c      	beq.n	8000844 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800080a:	e048      	b.n	800089e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800080c:	2b03      	cmp	r3, #3
 800080e:	d043      	beq.n	8000898 <HAL_GPIO_Init+0xdc>
 8000810:	2b11      	cmp	r3, #17
 8000812:	d01b      	beq.n	800084c <HAL_GPIO_Init+0x90>
          break;
 8000814:	e043      	b.n	800089e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000816:	4a89      	ldr	r2, [pc, #548]	; (8000a3c <HAL_GPIO_Init+0x280>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d026      	beq.n	800086a <HAL_GPIO_Init+0xae>
 800081c:	4a87      	ldr	r2, [pc, #540]	; (8000a3c <HAL_GPIO_Init+0x280>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d806      	bhi.n	8000830 <HAL_GPIO_Init+0x74>
 8000822:	4a87      	ldr	r2, [pc, #540]	; (8000a40 <HAL_GPIO_Init+0x284>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d020      	beq.n	800086a <HAL_GPIO_Init+0xae>
 8000828:	4a86      	ldr	r2, [pc, #536]	; (8000a44 <HAL_GPIO_Init+0x288>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d01d      	beq.n	800086a <HAL_GPIO_Init+0xae>
          break;
 800082e:	e036      	b.n	800089e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000830:	4a85      	ldr	r2, [pc, #532]	; (8000a48 <HAL_GPIO_Init+0x28c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d019      	beq.n	800086a <HAL_GPIO_Init+0xae>
 8000836:	4a85      	ldr	r2, [pc, #532]	; (8000a4c <HAL_GPIO_Init+0x290>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d016      	beq.n	800086a <HAL_GPIO_Init+0xae>
 800083c:	4a84      	ldr	r2, [pc, #528]	; (8000a50 <HAL_GPIO_Init+0x294>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d013      	beq.n	800086a <HAL_GPIO_Init+0xae>
          break;
 8000842:	e02c      	b.n	800089e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	623b      	str	r3, [r7, #32]
          break;
 800084a:	e028      	b.n	800089e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	3304      	adds	r3, #4
 8000852:	623b      	str	r3, [r7, #32]
          break;
 8000854:	e023      	b.n	800089e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	3308      	adds	r3, #8
 800085c:	623b      	str	r3, [r7, #32]
          break;
 800085e:	e01e      	b.n	800089e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	330c      	adds	r3, #12
 8000866:	623b      	str	r3, [r7, #32]
          break;
 8000868:	e019      	b.n	800089e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d102      	bne.n	8000878 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000872:	2304      	movs	r3, #4
 8000874:	623b      	str	r3, [r7, #32]
          break;
 8000876:	e012      	b.n	800089e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d105      	bne.n	800088c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000880:	2308      	movs	r3, #8
 8000882:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	611a      	str	r2, [r3, #16]
          break;
 800088a:	e008      	b.n	800089e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800088c:	2308      	movs	r3, #8
 800088e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69fa      	ldr	r2, [r7, #28]
 8000894:	615a      	str	r2, [r3, #20]
          break;
 8000896:	e002      	b.n	800089e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
          break;
 800089c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	2bff      	cmp	r3, #255	; 0xff
 80008a2:	d801      	bhi.n	80008a8 <HAL_GPIO_Init+0xec>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	e001      	b.n	80008ac <HAL_GPIO_Init+0xf0>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3304      	adds	r3, #4
 80008ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	2bff      	cmp	r3, #255	; 0xff
 80008b2:	d802      	bhi.n	80008ba <HAL_GPIO_Init+0xfe>
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	e002      	b.n	80008c0 <HAL_GPIO_Init+0x104>
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	3b08      	subs	r3, #8
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	210f      	movs	r1, #15
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	401a      	ands	r2, r3
 80008d2:	6a39      	ldr	r1, [r7, #32]
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	431a      	orrs	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f000 8096 	beq.w	8000a1a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008ee:	4a59      	ldr	r2, [pc, #356]	; (8000a54 <HAL_GPIO_Init+0x298>)
 80008f0:	4b58      	ldr	r3, [pc, #352]	; (8000a54 <HAL_GPIO_Init+0x298>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <HAL_GPIO_Init+0x298>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000906:	4a54      	ldr	r2, [pc, #336]	; (8000a58 <HAL_GPIO_Init+0x29c>)
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	3302      	adds	r3, #2
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	220f      	movs	r2, #15
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4013      	ands	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a4b      	ldr	r2, [pc, #300]	; (8000a5c <HAL_GPIO_Init+0x2a0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d013      	beq.n	800095a <HAL_GPIO_Init+0x19e>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a4a      	ldr	r2, [pc, #296]	; (8000a60 <HAL_GPIO_Init+0x2a4>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d00d      	beq.n	8000956 <HAL_GPIO_Init+0x19a>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a49      	ldr	r2, [pc, #292]	; (8000a64 <HAL_GPIO_Init+0x2a8>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d007      	beq.n	8000952 <HAL_GPIO_Init+0x196>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a48      	ldr	r2, [pc, #288]	; (8000a68 <HAL_GPIO_Init+0x2ac>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d101      	bne.n	800094e <HAL_GPIO_Init+0x192>
 800094a:	2303      	movs	r3, #3
 800094c:	e006      	b.n	800095c <HAL_GPIO_Init+0x1a0>
 800094e:	2304      	movs	r3, #4
 8000950:	e004      	b.n	800095c <HAL_GPIO_Init+0x1a0>
 8000952:	2302      	movs	r3, #2
 8000954:	e002      	b.n	800095c <HAL_GPIO_Init+0x1a0>
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <HAL_GPIO_Init+0x1a0>
 800095a:	2300      	movs	r3, #0
 800095c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800095e:	f002 0203 	and.w	r2, r2, #3
 8000962:	0092      	lsls	r2, r2, #2
 8000964:	4093      	lsls	r3, r2
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800096c:	493a      	ldr	r1, [pc, #232]	; (8000a58 <HAL_GPIO_Init+0x29c>)
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	3302      	adds	r3, #2
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d006      	beq.n	8000994 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000986:	4939      	ldr	r1, [pc, #228]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 8000988:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	4313      	orrs	r3, r2
 8000990:	600b      	str	r3, [r1, #0]
 8000992:	e006      	b.n	80009a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000994:	4935      	ldr	r1, [pc, #212]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	43db      	mvns	r3, r3
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d006      	beq.n	80009bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009ae:	492f      	ldr	r1, [pc, #188]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 80009b0:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	604b      	str	r3, [r1, #4]
 80009ba:	e006      	b.n	80009ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009bc:	492b      	ldr	r1, [pc, #172]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 80009be:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	43db      	mvns	r3, r3
 80009c6:	4013      	ands	r3, r2
 80009c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d006      	beq.n	80009e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009d6:	4925      	ldr	r1, [pc, #148]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	4313      	orrs	r3, r2
 80009e0:	608b      	str	r3, [r1, #8]
 80009e2:	e006      	b.n	80009f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009e4:	4921      	ldr	r1, [pc, #132]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	43db      	mvns	r3, r3
 80009ee:	4013      	ands	r3, r2
 80009f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009fe:	491b      	ldr	r1, [pc, #108]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	60cb      	str	r3, [r1, #12]
 8000a0a:	e006      	b.n	8000a1a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a0c:	4917      	ldr	r1, [pc, #92]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_GPIO_Init+0x2b0>)
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	4013      	ands	r3, r2
 8000a18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f47f aed0 	bne.w	80007d0 <HAL_GPIO_Init+0x14>
  }
}
 8000a30:	bf00      	nop
 8000a32:	372c      	adds	r7, #44	; 0x2c
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	10210000 	.word	0x10210000
 8000a40:	10110000 	.word	0x10110000
 8000a44:	10120000 	.word	0x10120000
 8000a48:	10310000 	.word	0x10310000
 8000a4c:	10320000 	.word	0x10320000
 8000a50:	10220000 	.word	0x10220000
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	40011000 	.word	0x40011000
 8000a68:	40011400 	.word	0x40011400
 8000a6c:	40010400 	.word	0x40010400

08000a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a80:	787b      	ldrb	r3, [r7, #1]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a86:	887a      	ldrh	r2, [r7, #2]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a8c:	e003      	b.n	8000a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a8e:	887b      	ldrh	r3, [r7, #2]
 8000a90:	041a      	lsls	r2, r3, #16
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	611a      	str	r2, [r3, #16]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e304      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 8087 	beq.w	8000bce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac0:	4b92      	ldr	r3, [pc, #584]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 030c 	and.w	r3, r3, #12
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d00c      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000acc:	4b8f      	ldr	r3, [pc, #572]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d112      	bne.n	8000afe <HAL_RCC_OscConfig+0x5e>
 8000ad8:	4b8c      	ldr	r3, [pc, #560]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae4:	d10b      	bne.n	8000afe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae6:	4b89      	ldr	r3, [pc, #548]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d06c      	beq.n	8000bcc <HAL_RCC_OscConfig+0x12c>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d168      	bne.n	8000bcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e2de      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b06:	d106      	bne.n	8000b16 <HAL_RCC_OscConfig+0x76>
 8000b08:	4a80      	ldr	r2, [pc, #512]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b0a:	4b80      	ldr	r3, [pc, #512]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e02e      	b.n	8000b74 <HAL_RCC_OscConfig+0xd4>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d10c      	bne.n	8000b38 <HAL_RCC_OscConfig+0x98>
 8000b1e:	4a7b      	ldr	r2, [pc, #492]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b20:	4b7a      	ldr	r3, [pc, #488]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	4a78      	ldr	r2, [pc, #480]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	4b77      	ldr	r3, [pc, #476]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e01d      	b.n	8000b74 <HAL_RCC_OscConfig+0xd4>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b40:	d10c      	bne.n	8000b5c <HAL_RCC_OscConfig+0xbc>
 8000b42:	4a72      	ldr	r2, [pc, #456]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b44:	4b71      	ldr	r3, [pc, #452]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	4a6f      	ldr	r2, [pc, #444]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b50:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e00b      	b.n	8000b74 <HAL_RCC_OscConfig+0xd4>
 8000b5c:	4a6b      	ldr	r2, [pc, #428]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b5e:	4b6b      	ldr	r3, [pc, #428]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4a68      	ldr	r2, [pc, #416]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	4b68      	ldr	r3, [pc, #416]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fd32 	bl	80005e4 <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b84:	f7ff fd2e 	bl	80005e4 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e292      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b96:	4b5d      	ldr	r3, [pc, #372]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f0      	beq.n	8000b84 <HAL_RCC_OscConfig+0xe4>
 8000ba2:	e014      	b.n	8000bce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fd1e 	bl	80005e4 <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fd1a 	bl	80005e4 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e27e      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bbe:	4b53      	ldr	r3, [pc, #332]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f0      	bne.n	8000bac <HAL_RCC_OscConfig+0x10c>
 8000bca:	e000      	b.n	8000bce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d063      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bda:	4b4c      	ldr	r3, [pc, #304]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00b      	beq.n	8000bfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000be6:	4b49      	ldr	r3, [pc, #292]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 030c 	and.w	r3, r3, #12
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d11c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x18c>
 8000bf2:	4b46      	ldr	r3, [pc, #280]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d116      	bne.n	8000c2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfe:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <HAL_RCC_OscConfig+0x176>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d001      	beq.n	8000c16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e252      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	493d      	ldr	r1, [pc, #244]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000c18:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2a:	e03a      	b.n	8000ca2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d020      	beq.n	8000c76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c34:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_RCC_OscConfig+0x270>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fcd3 	bl	80005e4 <HAL_GetTick>
 8000c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c40:	e008      	b.n	8000c54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c42:	f7ff fccf 	bl	80005e4 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e233      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f0      	beq.n	8000c42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c60:	492a      	ldr	r1, [pc, #168]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	e015      	b.n	8000ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <HAL_RCC_OscConfig+0x270>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fcb2 	bl	80005e4 <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c84:	f7ff fcae 	bl	80005e4 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e212      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d03a      	beq.n	8000d24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d019      	beq.n	8000cea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_RCC_OscConfig+0x274>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fc92 	bl	80005e4 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fc8e 	bl	80005e4 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1f2      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f0      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 fb98 	bl	8001418 <RCC_Delay>
 8000ce8:	e01c      	b.n	8000d24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_RCC_OscConfig+0x274>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fc78 	bl	80005e4 <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf6:	e00f      	b.n	8000d18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cf8:	f7ff fc74 	bl	80005e4 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d908      	bls.n	8000d18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e1d8      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	42420000 	.word	0x42420000
 8000d14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d18:	4b9b      	ldr	r3, [pc, #620]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1e9      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80a6 	beq.w	8000e7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d36:	4b94      	ldr	r3, [pc, #592]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10d      	bne.n	8000d5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4a91      	ldr	r2, [pc, #580]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000d44:	4b90      	ldr	r3, [pc, #576]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b8e      	ldr	r3, [pc, #568]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5e:	4b8b      	ldr	r3, [pc, #556]	; (8000f8c <HAL_RCC_OscConfig+0x4ec>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d118      	bne.n	8000d9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d6a:	4a88      	ldr	r2, [pc, #544]	; (8000f8c <HAL_RCC_OscConfig+0x4ec>)
 8000d6c:	4b87      	ldr	r3, [pc, #540]	; (8000f8c <HAL_RCC_OscConfig+0x4ec>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d76:	f7ff fc35 	bl	80005e4 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d7e:	f7ff fc31 	bl	80005e4 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b64      	cmp	r3, #100	; 0x64
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e195      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d90:	4b7e      	ldr	r3, [pc, #504]	; (8000f8c <HAL_RCC_OscConfig+0x4ec>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f0      	beq.n	8000d7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d106      	bne.n	8000db2 <HAL_RCC_OscConfig+0x312>
 8000da4:	4a78      	ldr	r2, [pc, #480]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000da6:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6213      	str	r3, [r2, #32]
 8000db0:	e02d      	b.n	8000e0e <HAL_RCC_OscConfig+0x36e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x334>
 8000dba:	4a73      	ldr	r2, [pc, #460]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000dbc:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6213      	str	r3, [r2, #32]
 8000dc6:	4a70      	ldr	r2, [pc, #448]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000dc8:	4b6f      	ldr	r3, [pc, #444]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	f023 0304 	bic.w	r3, r3, #4
 8000dd0:	6213      	str	r3, [r2, #32]
 8000dd2:	e01c      	b.n	8000e0e <HAL_RCC_OscConfig+0x36e>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	2b05      	cmp	r3, #5
 8000dda:	d10c      	bne.n	8000df6 <HAL_RCC_OscConfig+0x356>
 8000ddc:	4a6a      	ldr	r2, [pc, #424]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000dde:	4b6a      	ldr	r3, [pc, #424]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6213      	str	r3, [r2, #32]
 8000de8:	4a67      	ldr	r2, [pc, #412]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000dea:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6213      	str	r3, [r2, #32]
 8000df4:	e00b      	b.n	8000e0e <HAL_RCC_OscConfig+0x36e>
 8000df6:	4a64      	ldr	r2, [pc, #400]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000df8:	4b63      	ldr	r3, [pc, #396]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	f023 0301 	bic.w	r3, r3, #1
 8000e00:	6213      	str	r3, [r2, #32]
 8000e02:	4a61      	ldr	r2, [pc, #388]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000e04:	4b60      	ldr	r3, [pc, #384]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	f023 0304 	bic.w	r3, r3, #4
 8000e0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d015      	beq.n	8000e42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e16:	f7ff fbe5 	bl	80005e4 <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e1c:	e00a      	b.n	8000e34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fbe1 	bl	80005e4 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e143      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0ee      	beq.n	8000e1e <HAL_RCC_OscConfig+0x37e>
 8000e40:	e014      	b.n	8000e6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e42:	f7ff fbcf 	bl	80005e4 <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e48:	e00a      	b.n	8000e60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fbcb 	bl	80005e4 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e12d      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e60:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1ee      	bne.n	8000e4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e72:	4a45      	ldr	r2, [pc, #276]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000e74:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 808c 	beq.w	8000fa0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8000e88:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e94:	d10e      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8000e96:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d108      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8000eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eae:	d101      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e103      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d14e      	bne.n	8000f5a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d009      	beq.n	8000edc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d001      	beq.n	8000edc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0ef      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <HAL_RCC_OscConfig+0x4f0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fb7f 	bl	80005e4 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8000eea:	f7ff fb7b 	bl	80005e4 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b64      	cmp	r3, #100	; 0x64
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e0df      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f0      	bne.n	8000eea <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8000f08:	491f      	ldr	r1, [pc, #124]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	4313      	orrs	r3, r2
 8000f18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8000f1a:	491b      	ldr	r1, [pc, #108]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_RCC_OscConfig+0x4f0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fb57 	bl	80005e4 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8000f3a:	f7ff fb53 	bl	80005e4 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b64      	cmp	r3, #100	; 0x64
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0b7      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f0      	beq.n	8000f3a <HAL_RCC_OscConfig+0x49a>
 8000f58:	e022      	b.n	8000fa0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_RCC_OscConfig+0x4e8>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_RCC_OscConfig+0x4f0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fb3a 	bl	80005e4 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8000f72:	e00f      	b.n	8000f94 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8000f74:	f7ff fb36 	bl	80005e4 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d908      	bls.n	8000f94 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e09a      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40007000 	.word	0x40007000
 8000f90:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8000f94:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1e9      	bne.n	8000f74 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 8088 	beq.w	80010ba <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000faa:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d068      	beq.n	8001088 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d14d      	bne.n	800105a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbe:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_RCC_OscConfig+0x628>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fb0e 	bl	80005e4 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fcc:	f7ff fb0a 	bl	80005e4 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e06e      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff2:	d10f      	bne.n	8001014 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8000ff4:	4933      	ldr	r1, [pc, #204]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8000ff6:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8000ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001002:	4930      	ldr	r1, [pc, #192]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	f023 020f 	bic.w	r2, r3, #15
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001014:	482b      	ldr	r0, [pc, #172]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	430b      	orrs	r3, r1
 8001028:	4313      	orrs	r3, r2
 800102a:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_RCC_OscConfig+0x628>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fad7 	bl	80005e4 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff fad3 	bl	80005e4 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e037      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x59a>
 8001058:	e02f      	b.n	80010ba <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_RCC_OscConfig+0x628>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fac0 	bl	80005e4 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fabc 	bl	80005e4 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e020      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x5c8>
 8001086:	e018      	b.n	80010ba <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e013      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_RCC_OscConfig+0x624>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d106      	bne.n	80010b6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	42420060 	.word	0x42420060

080010cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0d0      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010e0:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0207 	and.w	r2, r3, #7
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d210      	bcs.n	8001110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4967      	ldr	r1, [pc, #412]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	4b66      	ldr	r3, [pc, #408]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 0207 	bic.w	r2, r3, #7
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fe:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0207 	and.w	r2, r3, #7
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d001      	beq.n	8001110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0b8      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d020      	beq.n	800115e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001128:	4a59      	ldr	r2, [pc, #356]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	4b59      	ldr	r3, [pc, #356]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001140:	4a53      	ldr	r2, [pc, #332]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	4b53      	ldr	r3, [pc, #332]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800114a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800114c:	4950      	ldr	r1, [pc, #320]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4b50      	ldr	r3, [pc, #320]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d040      	beq.n	80011ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d107      	bne.n	8001182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d115      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e07f      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e073      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06b      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011aa:	4939      	ldr	r1, [pc, #228]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 0203 	bic.w	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011bc:	f7ff fa12 	bl	80005e4 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c2:	e00a      	b.n	80011da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c4:	f7ff fa0e 	bl	80005e4 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e053      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 020c 	and.w	r2, r3, #12
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d1eb      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0207 	and.w	r2, r3, #7
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d910      	bls.n	800121c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4924      	ldr	r1, [pc, #144]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 0207 	bic.w	r2, r3, #7
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0207 	and.w	r2, r3, #7
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e032      	b.n	8001282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001228:	4919      	ldr	r1, [pc, #100]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001246:	4912      	ldr	r1, [pc, #72]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800125a:	f000 f821 	bl	80012a0 <HAL_RCC_GetSysClockFreq>
 800125e:	4601      	mov	r1, r0
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_RCC_ClockConfig+0x1c8>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	fa21 f303 	lsr.w	r3, r1, r3
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_RCC_ClockConfig+0x1cc>)
 8001274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1d0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f970 	bl	8000560 <HAL_InitTick>

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000
 8001290:	40021000 	.word	0x40021000
 8001294:	080017e8 	.word	0x080017e8
 8001298:	20000008 	.word	0x20000008
 800129c:	20000000 	.word	0x20000000

080012a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	b091      	sub	sp, #68	; 0x44
 80012a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80012a6:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_RCC_GetSysClockFreq+0x160>)
 80012a8:	f107 0414 	add.w	r4, r7, #20
 80012ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ae:	c407      	stmia	r4!, {r0, r1, r2}
 80012b0:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_RCC_GetSysClockFreq+0x164>)
 80012b4:	1d3c      	adds	r4, r7, #4
 80012b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012d8:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <HAL_RCC_GetSysClockFreq+0x168>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d002      	beq.n	80012ee <HAL_RCC_GetSysClockFreq+0x4e>
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d003      	beq.n	80012f4 <HAL_RCC_GetSysClockFreq+0x54>
 80012ec:	e07f      	b.n	80013ee <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_RCC_GetSysClockFreq+0x16c>)
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80012f2:	e07f      	b.n	80013f4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f6:	0c9b      	lsrs	r3, r3, #18
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001300:	4413      	add	r3, r2
 8001302:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d065      	beq.n	80013de <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_RCC_GetSysClockFreq+0x168>)
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800131e:	4413      	add	r3, r2
 8001320:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_RCC_GetSysClockFreq+0x168>)
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d043      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_RCC_GetSysClockFreq+0x168>)
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	3301      	adds	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <HAL_RCC_GetSysClockFreq+0x168>)
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3302      	adds	r3, #2
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	f04f 0400 	mov.w	r4, #0
 800135c:	fb03 f502 	mul.w	r5, r3, r2
 8001360:	fb01 f004 	mul.w	r0, r1, r4
 8001364:	4428      	add	r0, r5
 8001366:	fba1 3403 	umull	r3, r4, r1, r3
 800136a:	1902      	adds	r2, r0, r4
 800136c:	4614      	mov	r4, r2
 800136e:	4a27      	ldr	r2, [pc, #156]	; (800140c <HAL_RCC_GetSysClockFreq+0x16c>)
 8001370:	fb02 f104 	mul.w	r1, r2, r4
 8001374:	2200      	movs	r2, #0
 8001376:	fb02 f203 	mul.w	r2, r2, r3
 800137a:	440a      	add	r2, r1
 800137c:	4923      	ldr	r1, [pc, #140]	; (800140c <HAL_RCC_GetSysClockFreq+0x16c>)
 800137e:	fba3 5601 	umull	r5, r6, r3, r1
 8001382:	1993      	adds	r3, r2, r6
 8001384:	461e      	mov	r6, r3
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001390:	f04f 0400 	mov.w	r4, #0
 8001394:	fb03 fe02 	mul.w	lr, r3, r2
 8001398:	fb01 f004 	mul.w	r0, r1, r4
 800139c:	4470      	add	r0, lr
 800139e:	fba1 3403 	umull	r3, r4, r1, r3
 80013a2:	1902      	adds	r2, r0, r4
 80013a4:	4614      	mov	r4, r2
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	4628      	mov	r0, r5
 80013ac:	4631      	mov	r1, r6
 80013ae:	f7fe ff39 	bl	8000224 <__aeabi_uldivmod>
 80013b2:	4603      	mov	r3, r0
 80013b4:	460c      	mov	r4, r1
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013b8:	e007      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	4a13      	ldr	r2, [pc, #76]	; (800140c <HAL_RCC_GetSysClockFreq+0x16c>)
 80013be:	fb02 f203 	mul.w	r2, r2, r3
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80013ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013ce:	461a      	mov	r2, r3
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d108      	bne.n	80013e8 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80013d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013dc:	e004      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_RCC_GetSysClockFreq+0x170>)
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80013e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013ec:	e002      	b.n	80013f4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_GetSysClockFreq+0x174>)
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3744      	adds	r7, #68	; 0x44
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	bf00      	nop
 8001400:	080017c8 	.word	0x080017c8
 8001404:	080017d8 	.word	0x080017d8
 8001408:	40021000 	.word	0x40021000
 800140c:	017d7840 	.word	0x017d7840
 8001410:	003d0900 	.word	0x003d0900
 8001414:	007a1200 	.word	0x007a1200

08001418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <RCC_Delay+0x34>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <RCC_Delay+0x38>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0a5b      	lsrs	r3, r3, #9
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001434:	bf00      	nop
  }
  while (Delay --);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	60fa      	str	r2, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f9      	bne.n	8001434 <RCC_Delay+0x1c>
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008
 8001450:	10624dd3 	.word	0x10624dd3

08001454 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4a24      	ldr	r2, [pc, #144]	; (80014fc <MX_GPIO_Init+0xa8>)
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_GPIO_Init+0xa8>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_GPIO_Init+0xa8>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <MX_GPIO_Init+0xa8>)
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MX_GPIO_Init+0xa8>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_GPIO_Init+0xa8>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <MX_GPIO_Init+0xa8>)
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_GPIO_Init+0xa8>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_GPIO_Init+0xa8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <MX_GPIO_Init+0xac>)
 80014b8:	f7ff fada 	bl	8000a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014bc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2301      	movs	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]

 80014ca:	2302      	movs	r3, #2
 80014cc:	61fb      	str	r3, [r7, #28]
  /*Configure GPIO pin : PA0 */
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4619      	mov	r1, r3
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <MX_GPIO_Init+0xac>)
 80014d6:	f7ff f971 	bl	80007bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]

 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  /*Configure GPIO pins : PE8 PE9 PE10 PE11 
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_GPIO_Init+0xb0>)
 80014ee:	f7ff f965 	bl	80007bc <HAL_GPIO_Init>
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	40011800 	.word	0x40011800
 8001504:	40010c00 	.word	0x40010c00

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint32_t local1=0;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
int8_t local2=0;
 8001512:	2300      	movs	r3, #0
 8001514:	70fb      	strb	r3, [r7, #3]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f7ff f80d 	bl	8000534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f803 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f7ff ff99 	bl	8001454 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001522:	e7fe      	b.n	8001522 <main+0x1a>

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	; 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	2238      	movs	r2, #56	; 0x38
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f934 	bl	80017a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001546:	2301      	movs	r3, #1
 8001548:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001550:	2304      	movs	r3, #4
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001554:	2301      	movs	r3, #1
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001568:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800156c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800156e:	2302      	movs	r3, #2
 8001570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001572:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fa8d 	bl	8000aa0 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800158c:	f000 f81e 	bl	80015cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001594:	2302      	movs	r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2102      	movs	r1, #2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd8e 	bl	80010cc <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015b6:	f000 f809 	bl	80015cc <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80015ba:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <SystemClock_Config+0xa4>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	3750      	adds	r7, #80	; 0x50
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	42420070 	.word	0x42420070

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_MspInit+0x5c>)
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_MspInit+0x5c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_MspInit+0x5c>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_MspInit+0x5c>)
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_MspInit+0x5c>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_MspInit+0x5c>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_MspInit+0x60>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_MspInit+0x60>)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <HardFault_Handler+0x4>

0800164e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <MemManage_Handler+0x4>

08001654 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <BusFault_Handler+0x4>

0800165a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <UsageFault_Handler+0x4>

08001660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f7fe ff9a 	bl	80005c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <SystemInit+0x70>)
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <SystemInit+0x70>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80016a0:	4917      	ldr	r1, [pc, #92]	; (8001700 <SystemInit+0x70>)
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <SystemInit+0x70>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <SystemInit+0x74>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <SystemInit+0x70>)
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <SystemInit+0x70>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016bc:	4a10      	ldr	r2, [pc, #64]	; (8001700 <SystemInit+0x70>)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <SystemInit+0x70>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <SystemInit+0x70>)
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <SystemInit+0x70>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016d2:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SystemInit+0x70>)
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <SystemInit+0x70>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80016de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <SystemInit+0x70>)
 80016e2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80016e6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SystemInit+0x70>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x78>)
 80016f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f4:	609a      	str	r2, [r3, #8]
#endif 
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	f0ff0000 	.word	0xf0ff0000
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800170c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800170e:	e003      	b.n	8001718 <LoopCopyDataInit>

08001710 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001712:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001714:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001716:	3104      	adds	r1, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001718:	480a      	ldr	r0, [pc, #40]	; (8001744 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800171c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800171e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001720:	d3f6      	bcc.n	8001710 <CopyDataInit>
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001724:	e002      	b.n	800172c <LoopFillZerobss>

08001726 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001728:	f842 3b04 	str.w	r3, [r2], #4

0800172c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800172e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001730:	d3f9      	bcc.n	8001726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001732:	f7ff ffad 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001736:	f000 f80f 	bl	8001758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800173a:	f7ff fee5 	bl	8001508 <main>
  bx lr
 800173e:	4770      	bx	lr
  ldr r3, =_sidata
 8001740:	08001808 	.word	0x08001808
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001748:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800174c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001750:	2000002c 	.word	0x2000002c

08001754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC1_2_IRQHandler>
	...

08001758 <__libc_init_array>:
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	2500      	movs	r5, #0
 800175c:	4e0c      	ldr	r6, [pc, #48]	; (8001790 <__libc_init_array+0x38>)
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__libc_init_array+0x3c>)
 8001760:	1ba4      	subs	r4, r4, r6
 8001762:	10a4      	asrs	r4, r4, #2
 8001764:	42a5      	cmp	r5, r4
 8001766:	d109      	bne.n	800177c <__libc_init_array+0x24>
 8001768:	f000 f822 	bl	80017b0 <_init>
 800176c:	2500      	movs	r5, #0
 800176e:	4e0a      	ldr	r6, [pc, #40]	; (8001798 <__libc_init_array+0x40>)
 8001770:	4c0a      	ldr	r4, [pc, #40]	; (800179c <__libc_init_array+0x44>)
 8001772:	1ba4      	subs	r4, r4, r6
 8001774:	10a4      	asrs	r4, r4, #2
 8001776:	42a5      	cmp	r5, r4
 8001778:	d105      	bne.n	8001786 <__libc_init_array+0x2e>
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001780:	4798      	blx	r3
 8001782:	3501      	adds	r5, #1
 8001784:	e7ee      	b.n	8001764 <__libc_init_array+0xc>
 8001786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800178a:	4798      	blx	r3
 800178c:	3501      	adds	r5, #1
 800178e:	e7f2      	b.n	8001776 <__libc_init_array+0x1e>
 8001790:	08001800 	.word	0x08001800
 8001794:	08001800 	.word	0x08001800
 8001798:	08001800 	.word	0x08001800
 800179c:	08001804 	.word	0x08001804

080017a0 <memset>:
 80017a0:	4603      	mov	r3, r0
 80017a2:	4402      	add	r2, r0
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d100      	bne.n	80017aa <memset+0xa>
 80017a8:	4770      	bx	lr
 80017aa:	f803 1b01 	strb.w	r1, [r3], #1
 80017ae:	e7f9      	b.n	80017a4 <memset+0x4>

080017b0 <_init>:
 80017b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b2:	bf00      	nop
 80017b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b6:	bc08      	pop	{r3}
 80017b8:	469e      	mov	lr, r3
 80017ba:	4770      	bx	lr

080017bc <_fini>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	bf00      	nop
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr
